#
# global config
#

global
    maxconn 1000
    quiet
    log stdout format raw local0
    #
    # api to control haproxy:
    #stats socket ipv4@127.0.0.1:9999 level admin
    stats socket /tmp/hapee-lb.sock mode 660 level admin
    server-state-file /tmp/haproxy.state
    stats timeout 2m
    #
    # load lua scripts
    lua-load /usr/local/bin/lua/start.lua
    lua-load /usr/local/bin/lua/healthping.lua
    #
    # set these environment variable if NOT set already 
    # existing are NOT overwritten
    presetenv HAPX_US_USER dj
    presetenv HAPX_US_PASS leftthedefault0

defaults
    mode http
    option httplog
    log global
    timeout connect 10s
    timeout client 30s
    timeout server 30s
    maxconn 1000

listen stats
    bind 127.0.0.1:8404
    stats enable
    stats hide-version
    stats uri /hastats/
    stats refresh 60s

# Authentication
userlist AuthBasicUsers
    user "${HAPX_US_USER}" insecure-password "${HAPX_US_PASS}"

#
# front listener
#

frontend balancer
    bind 0.0.0.0:3000
    bind :::3000
    #
    mode http
    option forwardfor
    #
    # block http 1.0 clients
    http-request deny if HTTP_1.0
    #
    # only allow these http methods
    acl valid_http_method method GET OPTION HEAD
    http-request deny if !valid_http_method
    #
    # acl for local networks
    acl network_priv_sub src 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
    acl network_local src 127.0.0.1
    #
    # add headers
    http-response set-header X-Frame-Options DENY
    #
    # remove these headers
    http-response del-header server
    http-response del-header date
    http-response del-header last-modified
    #
    # ignore (no log) and deny these requests
    acl bad_url path -m end -i .py
    acl bad_url path -m end -i .php
    acl bad_url path -m end -i .asp
    acl bad_url path -m end -i .jsp
    acl bad_url path -m end -i .rb
    acl bad_url path -m end -i .pl
    acl bad_url path -m end -i .cgi
    acl bad_url url -m sub ../..
    http-request set-log-level silent if bad_url
    http-request deny if bad_url
    #use_backend http_trap if bad_url
    #
    # --- Container: MPD stream ---
    acl url_stream path /mpd/stream.pls
    use_backend http_mpd if url_stream
    #
    # --- Container: PyApp ---
    acl url_pyapp path_beg /pyapp/
    use_backend http_mpcpyapp if url_pyapp
    #
    # --- Container: AdminShell ---
    acl url_djshell path_beg /admin/shell
    acl auth_ok http_auth(AuthBasicUsers)
    http-request auth realm DJ-shell if url_djshell !auth_ok
    use_backend http_admin if url_djshell auth_ok
    #
    # --- Container: haproxy ---
    # stats
    use_backend http_hastat if { path_beg /hastats/ }
    # lua ping script
    acl url_lua_ping path_beg /ping/stat
    http-request set-log-level silent if url_lua_ping
    http-request use-service lua.lua_ping_server if url_lua_ping network_priv_sub
    # tarpit these requests
    use_backend http_trap if { path /admin/ }
    use_backend http_trap if { path /ping/ }
    use_backend http_trap if { path /mpd/ }
    use_backend http_trap if { path /lua/ }
    use_backend http_trap if { path /shell/ }
    use_backend http_trap if { path /login/ }
    #
    # --- Container: nginx web (default) ---
    default_backend http_nginx

#
# backends
#

# proxy statistics (haproxy)
backend http_hastat
    mode http
    balance roundrobin
    server http_hastat 127.0.0.1:8404 maxconn 100

# web-shell admin containers
backend http_admin
    mode http
    balance roundrobin
    server adminshell adminshell:7681/admin/shell maxconn 10

# MPD stream containers
backend http_mpd
    mode http
    balance roundrobin
    http-response set-header Transfer-Encoding chunked
    server backendmpd backendmpd:3123 maxconn 1000

# Pyapp flask containers
backend http_mpcpyapp
    mode http
    balance roundrobin
    http-request add-header X-Forwarded-For %[src]
    http-request set-path "%[path,regsub(^/pyapp/,/)]"
    server mpcpyapp-1 mpcpyapp:8888 maxconn 1000

# trap (haproxy)
# note: tar pit responses return a http 500 on purpose
backend http_trap
    mode http
    timeout tarpit 60s
    timeout tunnel 30m
    http-request tarpit

# nginx static containers (default)
backend http_nginx
    mode http
    balance roundrobin
    option httpchk http://backendweb:8880/ping/stat
    http-check expect status 200
    http-response set-header X-Clacks-Overhead "GNU Terry Pratchett"
    server backendweb-1 backendweb:8880 check

# eof
